library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(stats)
library(ggplot2)
library(data.table)
library(caret)
library(stringr)
library(rowr)
library(randomForest)
library(mice)
library(pscl)
raw_data <- read.csv("data/titanic_passenger_manifest.csv", header = TRUE)
raw_data <- read.csv("/data/titanic_passenger_manifest.csv", header = TRUE)
raw_data <- read.csv("/data/raw_data/titanic_passenger_manifest.csv", header = TRUE)
raw_data <- read.csv("data/raw_data/titanic_passenger_manifest.csv", header = TRUE)
# Earlier, we saw that age, Cabin, and Fare had missing values.
len(list(raw_data$cabin==""))
class1_no_cabin <-which(raw_data$pclass==1 & raw_data$cabin=="")
len(class1_no_cabin)
# Replace the values with NA
raw_data$cabin[class1_no_cabin] <- NA
len(is.na(raw_data$cabin))
# Convert to characters.
raw_data$sibsp <- as.numeric(as.character(raw_data$sibsp))
raw_data$parch <- as.numeric(as.character(raw_data$parch))
# Convert to numeric.
raw_data$sibsp <- as.numeric(raw_data$sibsp)
raw_data$parch <- as.numeric(raw_data$parch)
# Add values together.
raw_data$family_size <- raw_data$sibsp + raw_data$parch
# Let's create a new variable, “child”, to indicate whether the
# passenger is below the age of 18 or not.
raw_data$child <- 0
raw_data$child[raw_data$age < 18] <- 1
# Let's check the number of survivors by sub-set.
aggregate(survived ~ child + sex, data=raw_data, FUN=function(x) {sum(x)/length(x)})
# Let's get the titles separated from the names to see if that impacted survivability.
# Cast the names as a string
raw_data$name[1]
raw_data$name <- as.character(raw_data$name)
strsplit(raw_data$name[1], split='[,.]')
strsplit(raw_data$name[1], split='[,.]')
strsplit(raw_data$name[1], split='[,.]')[[1]][2]
# Now create a new column
raw_data$title <- sapply(raw_data$name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
# Clean up the extra spaces
raw_data$title <- sub(' ', '', raw_data$title)
table(raw_data$title)
# Now let's combine some of the titles to limit the factor variance
# Since Mademoiselle and Madame are similar, let's combine them.
raw_data$title[raw_data$title %in% c('Mme', 'Mlle')] <- 'Mlle'
# Now let's look at the military titles: Captain, Colonel, and Major
raw_data$title[raw_data$title %in% c('Capt', 'Major', 'Col')] <- 'Military'
# Now for the lower male peerage titles. While "Master" just denotes the heir
# of an estate, we should combine it with the other titles of nobility to create a peerage class.
raw_data$title[raw_data$title %in% c('Don', 'Jonkheer', 'Master', 'Sir')] <- 'Nobleman'
# Let's do the same for the female peerage titles.
raw_data$title[raw_data$title %in% c('Dona', 'Lady', 'the Countess')] <- 'Noblewoman'
# Let's combine Miss and Ms because they are similar enough, along with Mademoiselle.
raw_data$title[raw_data$title %in% c('Miss', 'Ms', 'Mlle')] <- 'Miss'
# Let's see how it looks now.
table(raw_data$title)
# Awesome! Let's turn the title into a factor.
raw_data$title <- factor(raw_data$title)
# Let's get the deck number, if applicable.
raw_data$cabin <- as.character(raw_data$cabin)
raw_data$deck <- substr(raw_data$cabin, 1, 1)
raw_data$deck[raw_data$deck==""] <- NA
paste("Titanic has", nlevels(factor(raw_data$deck)),"decks on the ship.")
# Time to covert everything to a factor variable.
raw_data_engineered <- raw_data[,c("survived","pclass","sex","age","sibsp","parch","fare","embarked","title","deck","family_size")]
list <- c("survived","pclass","sex","embarked","title","deck")
raw_data_engineered[list] <- lapply(raw_data_engineered[list],function(x) as.factor(x))
str(raw_data_engineered)
# ---------------------------------
# Imputing Missing Data using Random Forest
# -----------------------------------
md.pattern(raw_data_engineered)
set.seed(2476)
imp = mice(raw_data_engineered, method = "rf", m = 5)
# Once finished...
imputed_data_engineered = complete(imp)
summary(imp)
# Apply the randomForest data to imputate
apply(apply(imputed_data_engineered,2,is.na),2,sum)
# Visualize the data before and after imputation
par(mfrow=c(1,2))
hist(raw_data_engineered$fare, main = "Before Imputation", col = "violet")
hist(imputed_data_engineered$fare, main = "Post Imputation", col = "blue")
par(mfrow=c(1,2))
hist(raw_data_engineered$age, main = "Before Imputation", col = "violet")
hist(imputed_data_engineered$age, main = "Post Imputation", col = "blue")
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(tibble)
library(stats)
library(ggplot2)
library(data.table)
library(caret)
library(stringr)
library(rowr)
library(randomForest)
library(mice)
library(pscl)
par(mfrow=c(1,2))
hist(raw_data_engineered$fare, main = "Before Imputation", col = "violet")
hist(imputed_data_engineered$fare, main = "Post Imputation", col = "blue")
par(mfrow=c(1,2))
hist(raw_data_engineered$age, main = "Before Imputation", col = "violet")
hist(imputed_data_engineered$age, main = "Post Imputation", col = "blue")
'Single' -> imputedtrainingreengineered$FamilySizeC[imputedtrainingreengineered$FamilySize == 1]
'Small' -> imputedtrainingreengineered$FamilySizeC[imputedtrainingreengineered$FamilySize > 1 & imputedtrainingreengineered$FamilySize < 5]
'Large' -> imputedtrainingreengineered$FamilySizeC[imputedtrainingreengineered$FamilySize >4]
mosaicplot(table(imputedtrainingreengineered$FamilySizeC,imputedtrainingreengineered$Survived), main = "Survival by Family Size", shade = TRUE)
'Single' -> imputed_data_engineered$family_sizeC[imputed_data_engineered$family_size == 1]
'Small' -> imputed_data_engineered$family_sizeC[imputed_data_engineered$family_size > 1 & imputed_data_engineered$family_size < 5]
'Large' -> imputed_data_engineered$family_sizeC[imputed_data_engineered$family_size >4]
mosaicplot(table(imputed_data_engineered$family_sizeC,imputed_data_engineered$Survived), main = "Survival by Family Size", shade = TRUE)
'Single' -> imputed_data_engineered$family_sizeC[imputed_data_engineered$family_size == 1]
'Small' -> imputed_data_engineered$family_sizeC[imputed_data_engineered$family_size > 1 & imputed_data_engineered$family_size < 5]
'Large' -> imputed_data_engineered$family_sizeC[imputed_data_engineered$family_size >4]
mosaicplot(table(imputed_data_engineered$family_sizeC,imputed_data_engineered$survived), main = "Survival by Family Size", shade = TRUE)
p1 <- ggplot(imputed_data_engineered,aes(x = Pclass,fill = factor(survived)))+geom_bar(stat = "count", position = "stack")
p2 <- ggplot(imputed_data_engineered,aes(x = Pclass,fill = factor(survived)))+geom_bar(position = "fill")+labs(y = "Proportion")
grid.arrange(p1,p2,ncol=2)
library(grid.arrange)
library(gridExtra)
p1 <- ggplot(imputed_data_engineered,aes(x = Pclass,fill = factor(survived)))+geom_bar(stat = "count", position = "stack")
p2 <- ggplot(imputed_data_engineered,aes(x = Pclass,fill = factor(survived)))+geom_bar(position = "fill")+labs(y = "Proportion")
grid.arrange(p1,p2,ncol=2)
p1 <- ggplot(imputed_data_engineered,aes(x = pclass,fill = factor(survived)))+geom_bar(stat = "count", position = "stack")
p2 <- ggplot(imputed_data_engineered,aes(x = pclass,fill = factor(survived)))+geom_bar(position = "fill")+labs(y = "Proportion")
grid.arrange(p1,p2,ncol=2)
ggplot(imputed_data_engineered,aes(survived, fill= factor(Survived))) + geom_bar(stat = "count") + facet_grid(deck ~title)
ggplot(imputed_data_engineered,aes(survived, fill= factor(survived))) + geom_bar(stat = "count") + facet_grid(deck ~title)
ggplot(imputed_data_engineered,aes(survived, fill= factor(survived))) + geom_bar(stat = "count") + facet_grid(deck ~title)
coplot(age~title|survived,data = imputed_data_engineered, panel = panel.smooth,xlab = "Title",ylab = "Age",columns = 2)
ggplot(imputed_data_engineered, aes(x=pclass,y=age,fill = factor(survived))) + geom_violin()
